---
name: framework-development
description: Framework-specific development guidelines and architecture clarity
alwaysApply: true
---
# Framework Development Rules

## Project Architecture Clarity

### Framework vs External Files
- **Framework Development**: Files in `framework/development/` are for developing the Rules Framework itself
- **External Project Files**: Files in `framework/external/` are pulled into external Cursor projects
- **Clear Separation**: Always maintain clear distinction between these two purposes

### File Organization
- Keep framework development files in `framework/development/`
- Keep external project files in `framework/external/`
- Use symlinks in root for easy access during development
- Update all references when moving files between categories

## Documentation Standards

### Framework Documentation
- Document framework development processes in `framework/development/docs/`
- Document external project usage in `framework/external/docs/`
- Always clarify whether documentation is for framework developers or external users
- Include clear usage patterns and examples

### Architecture Documentation
- Maintain `FRAMEWORK_ARCHITECTURE.md` for technical architecture
- Maintain `FRAMEWORK_VS_EXTERNAL.md` for file classification
- Update README.md to reflect current structure
- Document data flow between framework and external projects

## Code Quality

### Framework Development
- Follow all core engineering practices
- Maintain high code quality standards
- Use comprehensive testing for all framework features
- Document all public APIs and interfaces

### External Project Integration
- Ensure external files are self-contained
- Provide clear setup instructions
- Include comprehensive error handling
- Maintain backward compatibility

## Deployment and Distribution

### Framework Deployment
- Deploy framework to Cloudflare Workers
- Ensure API endpoints are reliable and fast
- Monitor framework performance and usage
- Update external projects via MCP integration

### External Project Setup
- Provide one-line setup commands
- Ensure setup process is user-friendly
- Include comprehensive error messages
- Support both automated and manual setup

## Maintenance

### Regular Updates
- Keep framework development files current
- Update external project files based on user feedback
- Maintain clear versioning and changelog
- Test both framework and external integration

### Quality Assurance
- Test framework deployment regularly
- Validate external project setup process
- Monitor MCP integration functionality
- Ensure documentation accuracy

## Setup Script Deployment Workflow

### Mandatory Deployment Requirements

**CRITICAL**: Any changes to setup scripts or setup wizard MUST follow this workflow before marking as complete:

#### Affected Files
- `setup.sh` (repo root)
- `framework/development/scripts/setup-wizard.js`

#### Deployment Steps (MANDATORY)

1. **Deploy Changes to R2**
   - Run deployment script: `npm run deploy:framework` or `node framework/development/deployment/scripts/deploy-framework.js`
   - Verify files are uploaded to R2 bucket: `rules-framework-files`
   - Files must be deployed: `setup.sh` and `setup-wizard.js`

2. **Verify R2 Diff**
   - Check that files were updated in R2 storage
   - Use `wrangler r2 object get rules-framework-files/setup.sh` to download and verify
   - Use `wrangler r2 object get rules-framework-files/setup-wizard.js` to download and verify
   - Compare deployed content with local changes to ensure they match
   - Verify file content includes all intended changes

3. **Test in Test Environment**
   - Test setup in `~/Projects/test-automations` directory
   - Create a fresh test directory: `mkdir -p ~/Projects/test-automations/test-setup-$(date +%s)`
   - Run the setup script from the deployed URL: `curl -s https://rules-framework.mikehenken.workers.dev/files/setup.sh | bash`
   - Verify setup wizard runs correctly with all changes
   - Test all interactive features and flag combinations
   - Verify no errors occur during setup process

4. **Completion Criteria**
   - âœ… Changes deployed to R2
   - âœ… R2 diff verified (files match local changes)
   - âœ… Tested successfully in `~/Projects/test-automations` directory
   - âœ… No errors during test setup
   - âœ… All functionality works as expected

#### Failure Protocol

If any step fails:
- **DO NOT** mark the task as complete
- Fix the issue and restart from step 1
- Document any failures and resolutions
- Re-test from the beginning until all steps pass

#### Verification Commands

```bash
# Deploy to R2
npm run deploy:framework

# Verify R2 files
wrangler r2 object get rules-framework-files/setup.sh --file /tmp/setup.sh
wrangler r2 object get rules-framework-files/setup-wizard.js --file /tmp/setup-wizard.js

# Compare local vs deployed (example)
diff setup.sh /tmp/setup.sh
diff framework/development/scripts/setup-wizard.js /tmp/setup-wizard.js

# Test in test-automations directory
cd ~/Projects/test-automations
mkdir test-setup-$(date +%s)
cd test-setup-*
curl -s https://rules-framework.mikehenken.workers.dev/files/setup.sh | bash
```

## Best Practices

### Development Workflow
1. Develop framework features in `framework/development/`
2. Test framework functionality thoroughly
3. Deploy framework to Cloudflare Workers
4. Update external project files via MCP
5. Document changes and usage patterns

### User Experience
- Make external project setup as simple as possible
- Provide clear error messages and troubleshooting
- Maintain comprehensive documentation
- Ensure MCP integration is seamless

---

**These rules ensure the Rules Framework maintains clear architecture and excellent user experience!** ðŸŽ¯