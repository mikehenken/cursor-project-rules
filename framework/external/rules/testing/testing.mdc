---
description: Testing requirements and protocols
alwaysApply: true
---
## Testing Requirements - MANDATORY

### CRITICAL: Every feature MUST have these tests BEFORE it's considered complete:

#### 1. Integration Tests (API + Component Data Flow)
- **MANDATORY for every API endpoint:**
  - Test the ACTUAL response structure (object vs array)
  - Validate ALL required fields are present
  - Verify data types match what components expect
  - Test that arrays are actually arrays, not objects
  - Validate nested data structures
  - Test with REAL data, not mocks
- **Why:** Prevents runtime errors from API/component data mismatches
- **Location:** `frontend/tests/integration/`

#### 2. End-to-End Tests (Full User Flow)
- **MANDATORY for every user-facing feature:**
  - Test complete user workflows from login to feature interaction
  - Monitor console for JavaScript runtime errors
  - Verify no "X is not a function" errors occur
  - Test with actual network requests (no mocks)
  - Validate data displays correctly in the UI
  - Test user interactions (clicks, inputs, forms)
- **Why:** Catches runtime errors that only appear with real data flow
- **Location:** `frontend/tests/e2e/`

#### 3. API Response Validation Tests
- **MANDATORY for ALL API routes:**
  - Every endpoint MUST have a test validating response structure
  - Test GET, POST, PUT, DELETE methods separately
  - Verify Content-Type headers
  - Test error responses (400, 401, 404, 500)
  - Validate pagination/filtering if applicable
- **Why:** Ensures API contract matches frontend expectations
- **Location:** `frontend/tests/integration/api-response-validation.test.ts`

#### 4. Component Integration Tests
- **MANDATORY when components fetch data:**
  - Test component with real API calls (not mocked)
  - Verify component handles loading states
  - Verify component handles error states
  - Verify component handles empty data
  - Test that filter/map/reduce operations work on actual data
- **Why:** Catches type mismatches and runtime method errors
- **Location:** `frontend/tests/integration/`

### Test Execution Protocol - NON-NEGOTIABLE:

1. **BEFORE marking any feature complete:**
   - Write integration tests for API endpoints
   - Write E2E tests for user flows
   - Run ALL tests and verify they PASS
   - Fix failures by addressing ROOT CAUSE, not workarounds

2. **AFTER implementing any feature:**
   - Run the specific test suite for that feature
   - Run full regression suite
   - Check browser console for errors during E2E tests
   - Verify no new linter errors

3. **Test Quality Standards:**
   - Tests MUST use REAL data, not mocks (except for external APIs)
   - Tests MUST verify actual data structures, not just success flags
   - Tests MUST catch runtime errors (TypeError, filter is not a function, etc.)
   - Tests MUST be specific enough to pinpoint the exact failure

4. **What Should Have Been Tested:**
   - **Example Bug:** `prosCons.filter is not a function`
   - **Missing Test:** Integration test validating API returns array, not object
   - **Missing Test:** E2E test that actually loads the component with real data
   - **Lesson:** Always validate data types match between API and component

### Test-Driven Development:

- Write tests FIRST when possible
- For bug fixes, write a test that reproduces the bug FIRST
- Test must FAIL initially, then PASS after fix
- All tests must continue to PASS after fix

### Regression Prevention:

- Every bug fix MUST include a test that would have caught it
- Run full test suite before committing
- CI/CD must run all tests
- Zero tolerance for skipped or disabled tests without documented reason